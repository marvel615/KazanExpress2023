Папка Text Solution: для получения предсказаний использовалась библиотека fasttext
01 Preparation - предобработка данных для обучения на тексте. 
Тут же для картинок сохранил csv файл, в котором product_id - название .jpg файла с соответствующей меткой.

1 Fast Text Imbalanced - первая попытка обучить модель на несбалансированной выборке. 
f1-score получился 0.833. Для "сырых данных" неплохо.

02 Balanced - пробуем увеличить скор. Сбалансируем обучающую выборку.
Возьмем по 50 товаров каждой категории, для этого:
а) Для тех у кого больше 50 категорий выберем 50 случайныъ представителей. undersapmling Файл: undersample Balanced Train.ipynb
б) Для тех у кого меньше (либо равно) будем делать выборку с возвращением 50 элементов. oversampling Файл: oversample Balanced Train.ipynb

2 Fast Text balanced - теперь обучим модель на сбалансированной выборке
f1-score убавился до 0.777. Цифра конечно красивая, но надо придумать что-то еще.

03 Preprocessing balanced - Сбалансированную выборку еще очистим с помощью nltk. 
(Делал в Google Colab, поэтому отступы в функциях могут некорректно отображаться!!!)
Уберем stop-words так как они не несут смысловой нагрузки

3 Fast Text cleaned-balanced - обучим модель на сбалансированной и очищеной выборке
f1-score увеличился до 0.848.
Подобрав параметры, обучим модель на всех данных и сделаем предсказания resulttext.parquet

======================================================================================================================================

Папка Image Solution: 
для получения предсказаний использовалась библиотека keras в силу простоты построения модели 
(ниже под кодом найдете класс для сети на PyTorch)

Папка 1 images_folder - подразумевается что в ней лежит папка images с train/test картинками
С помощью описательных csv для train и test, которые сформированы в шаге 01 для Text Solution, сгружаем картинки.
Но так как train картинок слишком много и они не помещаются в память,
выберем по 32 картинки каждой категории (похожая процедура была ранее undersapmling и oversampling) и запишем их в .npy массив
Для train также выгрузим метки для обучения train_labels
Аналогично сгружаем тестовые картинки.
Результаты сохраняем в numpy массивы, которые будут использоваться для обучения модлеи.

Папка 2 images_numpy_folder - в неё перемещаем numpy массивы (train_images_np.npy и train_labels_np.npy), которые будут использоваться для обучения модлеи.
Для предсказаний загружаем test_images_np.npy
Image-Prediction.ipynb - построение модели и обучение на тренировочной выборке. Формирование массива ответа (preds_images.npy) для тестовых картинок.
Results_images.ipynb - преобразование массива для ответа (preds_images.npy) в правильный вектор и формирование resultimages.parquet на основе описательной csv

====================================================================================================================================

КАЧЕСТВО ДЛЯ КАРТИНОК ПОЛУЧИЛОСЬ ХУЖЕ, ПОЭТОМУ ИТОГОВЫЙ ОТВЕТ МОЕГО РЕШЕНИЯ ЯВЛЯЮТСЯ ПРЕДСКАЗАНИЯ НА ТЕКСТОВЫХ ДАННЫХ
в корневую папку поместил result.parquet который выдаю за ответ.  